#!/usr/bin/env bash

# A helper script to create a gerrit review.

# Overview of this command.
# `env REVIEW_BASE=X git gerrit-review` will create M commit named _review_for_topic
# on top of _review_for_x which has a squashed commit from A to C.
#
#               _review_for_x
#               :
#               o---M _review_for_topic
#              /
#  ---o---o---o---o---o---o master
#             :\
#    merge-base o---X---A---B---C topic (HEAD)
#                   :
#                   REVIEW_BASE

COLOR_RESET=$(tput sgr0)
COLOR_RED=$(tput setaf 1)
COLOR_BLUE=$(tput setaf 4)

REVIEW_BRANCH_NAME_PREFIX="reviews/"
REBASE_BRANCH_NAME_PREFIX="rebases/"

git_branch_exists() {
  [ "x$(git branch --list "$@")" != "x" ]
}

# Resolve the branch post to a review
# Default to HEAD.
BRANCH_NAME="${BRANCH_NAME:-$(git symbolic-ref HEAD 2>/dev/null|cut -d '/' -f 3)}"
if [ "x${BRANCH_NAME}" = "x" ]; then
  echo "${COLOR_RED}Please give a branch name to HEAD.${COLOR_RESET}"
  exit 1
fi

if [ "${BRANCH_NAME#${REVIEW_BRANCH_NAME_PREFIX}}" != "${BRANCH_NAME}" ]; then
  echo "${COLOR_RED}Current HEAD is a review branch.${COLOR_RESET}"
  exit 1
fi

# Branch names for temporary use.
REVIEW_BRANCH_NAME="${REVIEW_BRANCH_NAME_PREFIX}${BRANCH_NAME}"
REBASE_BRANCH_NAME="${REBASE_BRANCH_NAME_PREFIX}${BRANCH_NAME}"

MASTER_BRANCH_NAME="${MASTER_BRANCH_NAME:-"master"}"

# Resolve the original commit for the review.
# Default to the merge-base between master and review branch.
REVIEW_BASE="${REVIEW_BASE:-$(git merge-base ${MASTER_BRANCH_NAME} HEAD 2>/dev/null)}"
if [ "x${REVIEW_BASE}" = "x" ]; then
  echo "${COLOR_RED}Fail to find base commit for review.${COLOR_RESET}"
  exit 1
fi

# If we have a review branch for the original commit, use it as the base commit
# for creating a new review commit to create a dependency.
MERGE_BASE="${REVIEW_BRANCH_NAME_PREFIX}${REVIEW_BASE}"
if ! git_branch_exists "${MERGE_BASE}"; then
  MERGE_BASE="${REVIEW_BASE}"
fi

# Announce what's going on.
echo "${COLOR_BLUE}Current branch:${COLOR_RESET} ${BRANCH_NAME}"
echo "${COLOR_BLUE} Review branch:${COLOR_RESET} ${REVIEW_BRANCH_NAME}"
echo "${COLOR_BLUE}   Review base:${COLOR_RESET} $(git show -s --oneline "${REVIEW_BASE}")"
echo "${COLOR_BLUE}    Merge base:${COLOR_RESET} $(git show -s --oneline "${MERGE_BASE}")"
if git_branch_exists "${REVIEW_BRANCH_NAME}"; then
  echo "${COLOR_BLUE}Commit message:${COLOR_RESET} $(git show -s "${REVIEW_BRANCH_NAME}")"
fi

# If we have the merge base where is not the review base,
# rebase commits onto the merge base then use it as a branch for the review.
if [ "${MERGE_BASE}" != "${REVIEW_BASE}" ]; then
  echo ""
  echo "${COLOR_BLUE}Rebase commits from ${REVIEW_BASE} to ${BRANCH_NAME}...${COLOR_RESET}"

  if ! git checkout -b "${REBASE_BRANCH_NAME}" "${BRANCH_NAME}"; then
    echo "${COLOR_RED}Fail to prepare ${REBASE_BRANCH_NAME}.${COLOR_RESET}"
    exit 1
  fi

  if ! git rebase --onto "${MERGE_BASE}" "${REVIEW_BASE}" "${REBASE_BRANCH_NAME}"; then
    echo "${COLOR_RED}Fail to rebase ${BRANCH_NAME}.${COLOR_RESET}"
    exit 1
  fi

  BRANCH_NAME="${REBASE_BRANCH_NAME}"
fi

# Stash old review branch for taking the original commit log.
echo ""
echo "${COLOR_BLUE}Preparing ${REVIEW_BRANCH_NAME}...${COLOR_RESET}"

ORIGINAL_REVIEW_BRANCH_NAME="${REVIEW_BRANCH_NAME}_"

git branch -m "${REVIEW_BRANCH_NAME}" "${ORIGINAL_REVIEW_BRANCH_NAME}" 2>/dev/null
if ! git checkout -b "${REVIEW_BRANCH_NAME}" "${MERGE_BASE}"; then
  git branch -m "${ORIGINAL_REVIEW_BRANCH_NAME}" "${REVIEW_BRANCH_NAME}" 2>/dev/null
  echo "${COLOR_RED}Fail to prepare ${REVIEW_BRANCH_NAME}.${COLOR_RESET}"
  exit 1
fi

# Create a squash commit on the merge base.
echo ""
echo "${COLOR_BLUE}Squash and merge ${BRANCH_NAME}...${COLOR_RESET}"

git merge --squash "${BRANCH_NAME}" || exit 1
if git_branch_exists "${ORIGINAL_REVIEW_BRANCH_NAME}"; then
  git commit -e -c "${ORIGINAL_REVIEW_BRANCH_NAME}" || exit 1
else
  git commit || exit 1
fi

# Clean up.
for branch in "${ORIGINAL_REVIEW_BRANCH_NAME}" "${REBASE_BRANCH_NAME}"; do
  if git_branch_exists "${branch}"; then
    git branch -D "${branch}"
  fi
done

# Done!
echo ""
echo "${COLOR_BLUE}Ready for git push gerrit HEAD:refs/for/${MASTER_BRANCH_NAME}${COLOR_RESET}"
