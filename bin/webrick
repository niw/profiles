#!/usr/bin/env ruby

require "webrick"
require "webrick/https"
require "optparse"

args = {
  :document_root => File.expand_path(Dir.pwd),
  :port => 3000
}
OptionParser.new.tap do |opt|
  opt.on("-d", "--document-root=PATH") do |value|
    args[:document_root] = value
  end
  opt.on("-p", "--port=PORT") do |value|
    args[:port] = value.to_i
  end
  opt.on("-k", "--tls-key=KEY") do |value|
    args[:tls_key] = value
  end
  opt.on("-c", "--tls-cert=CERT") do |value|
    args[:tls_cert] = value
  end
end.parse!(ARGV)

class EchoServlet < WEBrick::HTTPServlet::AbstractServlet
  def do_GET(req, res)
    echo(req, res)
  end

  def do_POST(req, res)
    echo(req, res)
  end

  private

  def echo(req, res)
    res.content_type = "text/plain";
    puts res.body = ["Request:", req.request_line, "Header:", req.header.inspect, "Body:", req.body.inspect].join("\r\n")
  end
end

class NullServlet < WEBrick::HTTPServlet::AbstractServlet
  def do_GET(req, res)
  end

  def do_POST(req, res)
  end
end

options = {
  :Port => args[:port],
  :BindAddress => '0.0.0.0',
  :DocumentRoot => args[:document_root],
  :MimeTypes => WEBrick::HTTPUtils::DefaultMimeTypes.merge({
    # place additional MIME types here
    # "jpg" => "image/jpeg"
  })
}

if args[:tls_key] && args[:tls_cert]
  options.merge!({
    :SSLEnable => true,
    :SSLPrivateKey => OpenSSL::PKey::RSA.new(File.open(args[:tls_key])),
    :SSLCertificate => OpenSSL::X509::Certificate.new(File.open(args[:tls_cert]))
  })
end

server = WEBrick::HTTPServer.new(options)
server.mount("/echo", EchoServlet);
server.mount("/null", NullServlet);

trap('INT') do
  server.shutdown
end

server.start
