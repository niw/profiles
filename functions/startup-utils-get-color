startup-utils-get-color() {
  local -a color_sequences
  local -a color_names
  local flag use_escape_sequence use_name use_index
  local -a index_shifts
  local index_shift index escape_sequence
  local -i number

  # ANSI escape sequences
  # ---------------------
  #
  # `\e[NN;NN;...;NNm` set styles as NN, NN=0 to reset. NN can be next colors.
  #
  #                Black Red Green Yellow Blue Magenta Cyan White
  #     Foreground    30  31    32     33   34      35   36    37
  #     Background    40  41    42     43   44      45   46    47

  color_sequences=(30 31 32 33 34 35 36 37)
  readonly color_sequences
  color_names=(black red green yellow blue magenta cyan white)
  readonly color_names

  while getopts 'enp' flag; do
    case $flag in
      e) use_escape_sequence=1 ;;
      n) use_name=1 ;;
      i) use_index=1 ;;
    esac
  done
  readonly use_escape_sequence
  shift $((OPTIND - 1))

  # Zsh by default is using 1 start index, bash is using 0 start index.
  # This is a trick to adjust index.
  index_shifts=(1 0)
  readonly index_shifts
  index_shift=${index_shifts[1]}

  # If input is a decimal number, use it as a number.
  # Use `10#` to evaluate expression starting with `0`, which can be evaluated
  # as octal and can be fail.
  if [[ $* =~ ^[0-9]+$ && $* == $((10#$*)) ]]; then
    number=$((10#$*))
  else
    number=$((10#$(printf '%s' "$*"|sum|cut -d' ' -f1)))
  fi

  # No black color for visibility.
  index=$((number % 7 + 1 + index_shift))
  escape_sequence="\e[${color_sequences[$index]}m"

  if (( use_escape_sequence )); then
    echo "$escape_sequence"
  elif (( use_name )); then
    echo "${color_names[$index]}"
  elif (( use_index )); then
    echo "$index"
  else
    echo "${escape_sequence}${*}\e[0m"
  fi
}

startup-utils-get-color "$@"
